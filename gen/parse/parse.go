package parse

import (
	"bytes"
	"fmt"
	"github.com/gobuffalo/packr/v2"
	"go/format"
	"text/template"
)


type Config struct {
	State string
	Input string
	Output string
	Package string
}
var conf *Config
var parseState string

//converts graphql -> go
func getBuiltIn(key string) (string, bool) {
	val,ok := builtins[key]
	return val, ok
}

const (
	ModelFileName = "/models.go"
	FunctionFileName = "/generated.go"
	EnumFileName = "/enums.go"
	SchemaName = "/dgraph_schema.graphql"
	CustomsFileName = "/customs.go"
)

const (
	preamble = `// Code generated by gen. DO NOT EDIT (or feel free but it will be lost!).`
)

func (g *Generator) writeHeader(w *bytes.Buffer) {
	return
	_, _ = w.WriteString("package " + g.config.Package + " \n")
	_, _ = w.WriteString(preamble)
	_ = w.WriteByte('\n')

}

func addImport(imp string, imports []string) []string {
	for _,v := range imports {
		if v == imp {
			return imports
		}
	}
	return append(imports, imp)
}

func goFmt(byt []byte) []byte {
	if byt == nil {
		return nil
	}
	result, err := format.Source(byt)
	if err != nil {
		fmt.Println(string(byt))
		panic(err)
	}
	return result
}

//Parse parses the directory input and outputs go files to the directory output.
func Parse(config *Config) {
	gen := newGenerator(config)
	gen.Run()
}

//Below lies code for getting files and templates.

//The box relevant for embedding assets.
var box = packr.New("templates", "./templates")

var graphBox = packr.New("graphql", "./graphql")

func getTemplate(name string) *template.Template {
	file, ok := templates[name]
	if !ok {
		return nil
	}
	str, err := box.FindString(file)
	if err != nil {
		panic(err)
	}
	templ, err := template.New(name).Parse(str)
	if err != nil {
		panic(err)
	}
	return templ
}

func getGraphFile(name string) []byte {
	file, err := graphBox.Find(name)
	if err != nil {
		panic(err)
	}
	return file
}