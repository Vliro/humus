{{range .Fields}}
    type async{{.Parent}}{{.Name}} struct {
        Err error
        Value *{{.Type}}
    }
    //Populates the field of r.
    func (r *{{.Parent}}) Get{{.Parent}}{{.Name}}Async ({{if .IsArray}}count int,{{end}} filter int, txn *mulbase.Txn) chan async{{.Parent}}{{.Name}}{
        if r.UID() == "" {
            return nil
        }
        var ch = make(chan async{{.Parent}}{{.Name}}, 1)
        go func() {
            var output = new({{.Type}})
            var err = mulbase.GetChild(r,"{{.Tag}}",{{.Type}}Fields,{{if .IsArray}}count,{{else}}-1,{{end}}txn, output)
            var result async{{.Parent}}{{.Name}}
            result.Err = err
            result.Value = output
            ch <- result
        }()
        return ch
    }
/*
    func (r *{{.Parent}}) Add{{.Parent}}{{.Name}}(input *{{.Type}}) error {
        if input.UID() == "" {
            return mulbase.ErrUID
        }
        return nil
    }*/
{{end}}

