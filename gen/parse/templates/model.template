{{/* This template is for the model accessing all scalar values and all values. If you want to create relations between objects write them in get.template */}}
//Generating constant field values.
const (
{{range .Fields}}
    {{$.Name}}{{.Name}}Field humus.Predicate = "{{.Tag}}"{{end}}
)

func (r *{{.Name}}) GetType() []string {
    return _{{.Name}}Types
}

//Relative returns a new {{.Name}} containing
//only the node component of it, useful in saving edges
//while ensuring data stability.
func (r *{{.Name}}) Relative() *{{.Name}}{
    var x = new({{.Name}})
    x.Node = r.Node
    return x
}

//New{{.Name}} creates a new {{.Name}} with the given uid
//as well as properly set types.
func New{{.Name}}(uid humus.UID) *{{.Name}} {
    var n = new({{.Name}})
    n.Node.Uid = uid
    n.Node.Type = _{{.Name}}Types
    return n
}

//Fields returns all Scalar fields for this value.
func (r *{{.Name}}) Fields() humus.Fields {
    return {{.Name}}Fields
}
var _{{.Name}}Types = []string {
     "{{.Name}}",{{range .Interfaces}}
     "{{.}}",
     {{end}}
 }

 {{range .Interfaces}}
 func (r *{{$.Name}}) As{{.}}() *{{.}} {
    r.{{.}}.Node = r.Node
    return &r.{{.}}
 }
{{end}}
//Sets the types. This DOES NOT include interfaces!
//as they are set in dgraph already.
func (r *{{.Name}}) SetType() {
    r.Node.Type = _{{.Name}}Types
}
/*
//Values returns all the scalar values for this node.
func (r *{{.Name}}) Values() humus.DNode{
   var m {{.Name}}Scalars
   {{range .ScalarFields -}}
       {{if not .Nosave -}}
       m.{{.Name}}= r.{{.Name}}
       {{end -}}
   {{end -}}
   r.SetType()
   m.Node = r.Node
   return &m
}

//End of model.template
