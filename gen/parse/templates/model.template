{{/* This template is for the model accessing all scalar values and all values. If you want to create relations between objects write them in get.template */}}
//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *{{.Name}}) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
    mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
    _, err := txn.RunQuery(ctx, mut)
    return err
}
//Fields returns all Scalar fields for this value.
func (r *{{.Name}}) Fields() mulbase.FieldList {
    return {{.Name}}Fields
}
//Sets the types. This includes interfaces.
func (r *{{.Name}}) SetType() {
    r.Type = []string {
        "{{.Name}}",
        {{range .Interfaces}}"{{.}}",
        {{end}}
    }
}
//Values returns all the scalar values for this node.
func (r *{{.Name}}) Values() mulbase.DNode{
   var m {{.Name}}Scalars
   {{range .ScalarFields -}}
       m.{{.Name}}= r.{{.Name}}
       {{end -}}
   m.Uid = r.Uid
   return &m
}

//{{.Name}}Scalars is simply to avoid a map[string]interface{}
//It is a mirror of the previous struct with all scalar values.
type {{.Name}}Scalars struct {
    mulbase.Node
    {{range .ScalarFields -}}
        {{.Name}} {{.Type}} `json:"{{.Tag}}"`
    {{end}}
}

func (s *{{.Name}}Scalars) Values() mulbase.DNode {
    return s
}

func (s *{{.Name}}Scalars) Fields() mulbase.FieldList {
    return {{.Name}}Fields
}

//End of model.template
