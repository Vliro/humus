package mulgen

// Code generated by mulgen. DO NOT EDIT (or feel free but it will be lost!).
import (
	"context"
	"mulbase"
)

//Populates the field of r.
func (r *Level) GetLevelOwner(count int, filter int, txn *mulbase.Txn) error {
	if r.UID() == "" {
		return mulbase.ErrUID
	}
	return mulbase.GetChild(r, "Level.Owner", UserFields, txn, &r.Owner)
}

func (r *Level) AddLevelOwner(input *User) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	return nil
}

func (r *Level) Fields() mulbase.FieldList {
	return LevelFields
}

type asyncLevelOwner struct {
	Err   error
	Value User
}

func AsyncLevelOwner(q mulbase.Query, input *User, txn *mulbase.Txn) error {
	ch := make(chan asyncLevelOwner, 1)
	go func() {
		var obj User
		err := txn.RunQuery(context.Background(), q, &obj)
		ch <- asyncLevelOwner{err, obj}
	}()
	return nil
}

//Populates the field of r.
func (r *Todo) GetTodoUser(count int, filter int, txn *mulbase.Txn) error {
	if r.UID() == "" {
		return mulbase.ErrUID
	}
	return mulbase.GetChild(r, "Todo.User", UserFields, txn, &r.User)
}

func (r *Todo) AddTodoUser(input *User) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	return nil
}

func (r *Todo) Fields() mulbase.FieldList {
	return TodoFields
}

type asyncTodoUser struct {
	Err   error
	Value User
}

func AsyncTodoUser(q mulbase.Query, input *User, txn *mulbase.Txn) error {
	ch := make(chan asyncTodoUser, 1)
	go func() {
		var obj User
		err := txn.RunQuery(context.Background(), q, &obj)
		ch <- asyncTodoUser{err, obj}
	}()
	return nil
}

//Populates the field of r.
func (r *Character) GetCharacterAppearsIn(count int, filter int, txn *mulbase.Txn) error {
	if r.UID() == "" {
		return mulbase.ErrUID
	}
	return mulbase.GetChild(r, "Character.AppearsIn", EpisodeFields, txn, &r.AppearsIn)
}

func (r *Character) AddCharacterAppearsIn(input *Episode) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	return nil
}

func (r *Character) Fields() mulbase.FieldList {
	return CharacterFields
}

type asyncCharacterAppearsIn struct {
	Err   error
	Value Episode
}

func AsyncCharacterAppearsIn(q mulbase.Query, input *Episode, txn *mulbase.Txn) error {
	ch := make(chan asyncCharacterAppearsIn, 1)
	go func() {
		var obj Episode
		err := txn.RunQuery(context.Background(), q, &obj)
		ch <- asyncCharacterAppearsIn{err, obj}
	}()
	return nil
}

func (r *Episode) Fields() mulbase.FieldList {
	return EpisodeFields
}

//Populates the field of r.
func (r *User) GetUserLevels(count int, filter int, txn *mulbase.Txn) error {
	if r.UID() == "" {
		return mulbase.ErrUID
	}
	return mulbase.GetChild(r, "User.Levels", LevelFields, txn, &r.Levels)
}

func (r *User) AddUserLevels(input *Level) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	return nil
}

func (r *User) Fields() mulbase.FieldList {
	return UserFields
}

type asyncUserLevels struct {
	Err   error
	Value Level
}

func AsyncUserLevels(q mulbase.Query, input *Level, txn *mulbase.Txn) error {
	ch := make(chan asyncUserLevels, 1)
	go func() {
		var obj Level
		err := txn.RunQuery(context.Background(), q, &obj)
		ch <- asyncUserLevels{err, obj}
	}()
	return nil
}

//Beginning of field.template. General functions.
var globalFields = make(map[string]mulbase.Field)

func GetField(name string) mulbase.Field {
	return globalFields[name]
}

func MakeField(name string, flags mulbase.FieldMeta) mulbase.Field {
	var field = mulbase.MakeField(name, flags)
	if _, ok := globalFields[name]; !ok {
		globalFields[name] = field
	}
	return field
}

func GetGlobalFields() map[string]mulbase.Field {
	return globalFields
}
