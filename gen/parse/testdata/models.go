package mulgen

// Code generated by mulgen. DO NOT EDIT (or feel free but it will be lost!).
import (
	"context"
	"mulbase"
	"time"
)

type Question struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	Title         string    `json:"Question.title"`
	Text          string    `json:"Question.text"`
	DatePublished time.Time `json:"Question.datePublished"`
}

var QuestionFields mulbase.FieldList = []mulbase.Field{MakeField("Question.title", 0), MakeField("Question.text", 0), MakeField("Question.datePublished", 0)}

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Question) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	return txn.RunQuery(ctx, mut)
}

//Fields returns all Scalar fields for this value.
func (r *Question) Fields() mulbase.FieldList {
	return QuestionFields
}

//Sets the types. This includes interfaces.
func (r *Question) SetType() {
	r.Type = []string{
		"Question",
		"Post",
	}
}

//Values returns all the scalar values for this node.
func (r *Question) Values() mulbase.DNode {
	var m QuestionScalars
	m.Title = r.Title
	m.Text = r.Text
	m.DatePublished = r.DatePublished
	m.Uid = r.Uid
	return m
}

//QuestionScalars is simply to avoid a map[string]interface{}
//It is a mirror of the previous struct with all scalar values.
type QuestionScalars struct {
	mulbase.Node
	Title         string    `json:"Question.title"`
	Text          string    `json:"Question.text"`
	DatePublished time.Time `json:"Question.datePublished"`
}

func (s *QuestionScalars) Values() mulbase.DNode {
	return s
}

func (s *QuestionScalars) Fields() mulbase.FieldList {
	return QuestionFields
}

//End of model.template
type Comment struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	Text          string    `json:"Comment.text"`
	DatePublished time.Time `json:"Comment.datePublished"`
}

var CommentFields mulbase.FieldList = []mulbase.Field{MakeField("Comment.text", 0), MakeField("Comment.datePublished", 0)}

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Comment) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	return txn.RunQuery(ctx, mut)
}

//Fields returns all Scalar fields for this value.
func (r *Comment) Fields() mulbase.FieldList {
	return CommentFields
}

//Sets the types. This includes interfaces.
func (r *Comment) SetType() {
	r.Type = []string{
		"Comment",
		"Post",
	}
}

//Values returns all the scalar values for this node.
func (r *Comment) Values() mulbase.DNode {
	var m CommentScalars
	m.Text = r.Text
	m.DatePublished = r.DatePublished
	m.Uid = r.Uid
	return m
}

//CommentScalars is simply to avoid a map[string]interface{}
//It is a mirror of the previous struct with all scalar values.
type CommentScalars struct {
	mulbase.Node
	Text          string    `json:"Comment.text"`
	DatePublished time.Time `json:"Comment.datePublished"`
}

func (s *CommentScalars) Values() mulbase.DNode {
	return s
}

func (s *CommentScalars) Fields() mulbase.FieldList {
	return CommentFields
}

//End of model.template
