package mulgen

// Code generated by mulgen. DO NOT EDIT (or feel free but it will be lost!).
import (
	"context"
	"mulbase"
)

type Todo struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	Text string `json:"Todo.text"`
	Done bool   `json:"Todo.done"`
	User *User  `json:"Todo.user"`
}

var TodoFields mulbase.FieldList = []mulbase.Field{MakeField("Todo.text"), MakeField("Todo.done"), MakeField("Todo.user")}

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Todo) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	return txn.RunQuery(ctx, mut)
}

//TODO: This is lazy af.
func (r *Todo) Values() map[string]interface{} {
	var m = make(map[string]interface{})
	m["Todo.text"] = r.Text
	m["Todo.done"] = r.Done
	return m
}

type User struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	Name string `json:"User.name"`
}

var UserFields mulbase.FieldList = []mulbase.Field{MakeField("User.name")}

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *User) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	return txn.RunQuery(ctx, mut)
}

//TODO: This is lazy af.
func (r *User) Values() map[string]interface{} {
	var m = make(map[string]interface{})
	m["User.name"] = r.Name
	return m
}

type Character struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	Name      string    `json:"Character.name"`
	AppearsIn []Episode `json:"Character.appearsIn"`
}

var CharacterFields mulbase.FieldList = []mulbase.Field{MakeField("Character.name"), MakeField("Character.appearsIn")}

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Character) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	return txn.RunQuery(ctx, mut)
}

//TODO: This is lazy af.
func (r *Character) Values() map[string]interface{} {
	var m = make(map[string]interface{})
	m["Character.name"] = r.Name
	return m
}

type Episode struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	Name string `json:"Episode.name"`
}

var EpisodeFields mulbase.FieldList = []mulbase.Field{MakeField("Episode.name")}

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Episode) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	return txn.RunQuery(ctx, mut)
}

//TODO: This is lazy af.
func (r *Episode) Values() map[string]interface{} {
	var m = make(map[string]interface{})
	m["Episode.name"] = r.Name
	return m
}

type Query struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	Todos []Todo `json:"Query.todos"`
}

var QueryFields mulbase.FieldList = []mulbase.Field{MakeField("Query.todos")}

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Query) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	return txn.RunQuery(ctx, mut)
}

//TODO: This is lazy af.
func (r *Query) Values() map[string]interface{} {
	var m = make(map[string]interface{})
	return m
}
