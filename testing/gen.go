package mulgen

// Code generated by mulgen. DO NOT EDIT (or feel free but it will be lost!).
import (
	"context"
	"github.com/Vliro/mulbase"
)

//Populates the field of r.
func (r *Comment) GetCommentCommentsOn(filter int, txn *mulbase.Txn) error {
	if r.UID() == "" {
		return mulbase.ErrUID
	}
	q, err := mulbase.GetChild(r, "Comment.commentsOn", PostFields, -1)
	if err != nil {
		return err
	}
	_, err = txn.RunQuery(context.Background(), q, &r.CommentsOn)
	return err
}

//TODO. Don't use this.
func (r *Comment) AddCommentCommentsOn(input *Post) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	return nil
}

//Populates the field of r.
func (r *Comment) GetCommentTest(filter int, txn *mulbase.Txn) error {
	if r.UID() == "" {
		return mulbase.ErrUID
	}
	q, err := mulbase.GetChild(r, "Comment.test", EpisodeFields, -1)
	if err != nil {
		return err
	}
	_, err = txn.RunQuery(context.Background(), q, &r.Test)
	return err
}

//TODO. Don't use this.
func (r *Comment) AddCommentTest(input *Episode) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	return nil
}

//Beginning of field.template. General functions.
var globalFields = make(map[string]mulbase.Field)

func GetField(name string) mulbase.Field {
	return globalFields[name]
}

func MakeField(name string, flags mulbase.FieldMeta) mulbase.Field {
	var field = mulbase.Field{Name: name, Meta: flags}
	if _, ok := globalFields[name]; !ok {
		globalFields[name] = field
	}
	return field
}

func GetGlobalFields() map[string]mulbase.Field {
	return globalFields
}
