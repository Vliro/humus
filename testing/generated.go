package gen

// Code generated by gen. DO NOT EDIT (or feel free but it will be lost!).
import (
	"context"
	"github.com/Vliro/mulbase"
)

//Populates the field of r.
func (r *Question) GetQuestionYes(count int, filter *mulbase.Filter, db mulbase.Querier) ([]Comment, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "Question.yes", CommentFields, count, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ []Comment
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *Question) AddQuestionYes(input *Comment, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "Question.yes", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *Comment) GetCommentCommentsOn(filter *mulbase.Filter, db mulbase.Querier) ([]Post, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "Comment.commentsOn", PostFields, -1, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ []Post
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *Comment) AddCommentCommentsOn(input *Post, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "Comment.commentsOn", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *Comment) GetCommentYolo(filter *mulbase.Filter, db mulbase.Querier) ([]Comment, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "Comment.yolo", CommentFields, -1, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ []Comment
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *Comment) AddCommentYolo(input *Comment, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "Comment.yolo", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Beginning of field.template. General functions.
var globalFields = make(map[mulbase.Predicate]mulbase.Field)

func GetField(name mulbase.Predicate) mulbase.Field {
	return globalFields[name]
}

func MakeField(name mulbase.Predicate, flags mulbase.FieldMeta) mulbase.Field {
	var field = mulbase.Field{Name: name, Meta: flags}
	if _, ok := globalFields[name]; !ok {
		globalFields[name] = field
	}
	return field
}

func GetGlobalFields() map[mulbase.Predicate]mulbase.Field {
	return globalFields
}

type queryError struct {
	Msg string
}

func (q queryError) Error() string {
	return q.Msg
}

func newError(msg string) error {
	return queryError{msg}
}
