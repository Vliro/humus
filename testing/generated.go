package gen

//Code generated by mulgen. DO NOT EDIT (i mean, it will all be lost in the void)

import (
	"context"
	"github.com/Vliro/mulbase"
	"time"
)

var _ context.Context
var _ time.Time
var _ mulbase.Fields

//Populates the field of r.
func (r *Level) GetLevelOwner(filter *mulbase.Filter, db mulbase.Querier) (*User, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "Level.owner", UserFields, -1, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ *User
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *Level) AddLevelOwner(input *User, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "Level.owner", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *Level) GetLevelVersion(filter *mulbase.Filter, db mulbase.Querier) (*LevelVersion, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "Level.version", LevelVersionFields, -1, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ *LevelVersion
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *Level) AddLevelVersion(input *LevelVersion, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "Level.version", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *Level) GetLevelVersions(count int, filter *mulbase.Filter, db mulbase.Querier) ([]LevelVersion, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "Level.versions", LevelVersionFields, count, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ []LevelVersion
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *Level) AddLevelVersions(input *LevelVersion, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "Level.versions", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *PM) GetPMTo(filter *mulbase.Filter, db mulbase.Querier) (*User, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "PM.to", UserFields, -1, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ *User
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *PM) AddPMTo(input *User, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "PM.to", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *Page) GetPageLevels(count int, filter *mulbase.Filter, db mulbase.Querier) ([]PageLevel, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "Page.levels", PageLevelFields, count, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ []PageLevel
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *Page) AddPageLevels(input *PageLevel, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "Page.levels", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *PageLevel) GetPageLevelLevel(filter *mulbase.Filter, db mulbase.Querier) (*Level, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "PageLevel.level", LevelFields, -1, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ *Level
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *PageLevel) AddPageLevelLevel(input *Level, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "PageLevel.level", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *User) GetUserLevels(count int, filter *mulbase.Filter, db mulbase.Querier) ([]Level, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "User.levels", LevelFields, count, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ []Level
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *User) AddUserLevels(input *Level, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "User.levels", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *User) GetUserIgnored(count int, filter *mulbase.Filter, db mulbase.Querier) ([]User, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "User.ignored", UserFields, count, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ []User
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *User) AddUserIgnored(input *User, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "User.ignored", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *User) GetUserFriends(count int, filter *mulbase.Filter, db mulbase.Querier) ([]User, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "User.friends", UserFields, count, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ []User
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *User) AddUserFriends(input *User, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "User.friends", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Populates the field of r.
func (r *User) GetUserMessages(count int, filter *mulbase.Filter, db mulbase.Querier) ([]PM, error) {
	if r.UID() == "" {
		return nil, mulbase.ErrUID
	}
	q := mulbase.GetChild(r, "User.messages", PMFields, count, filter)
	if q == nil {
		return nil, newError("could not create query")
	}
	var typ []PM
	err := db.Query(context.Background(), q, &typ)
	return typ, err
}

//TODO. Don't use this.
func (r *User) AddUserMessages(input *PM, db mulbase.Querier) error {
	if input.UID() == "" {
		return mulbase.ErrUID
	}
	mut := mulbase.AddToList(r, "User.messages", input)
	_, err := db.Mutate(context.Background(), mut)
	return err
}

//Beginning of field.template. General functions.
var globalFields = make(map[mulbase.Predicate]mulbase.Field)

func GetField(name mulbase.Predicate) mulbase.Field {
	return globalFields[name]
}

func MakeField(name mulbase.Predicate, flags mulbase.FieldMeta) mulbase.Field {
	//var field = mulbase.Field{Name:name, Meta:flags}
	//if _,ok := globalFields[name]; !ok {
	//    globalFields[name] = field
	//}
	var fi = mulbase.Field{Name: name, Meta: flags}
	globalFields[name] = fi
	return fi
}

func GetGlobalFields() map[mulbase.Predicate]mulbase.Field {
	return globalFields
}

type queryError struct {
	Msg string
}

func (q queryError) Error() string {
	return q.Msg
}

func newError(msg string) error {
	return queryError{msg}
}
