package gen

// Code generated by gen. DO NOT EDIT (or feel free but it will be lost!).
import (
	"context"
	"github.com/Vliro/mulbase"
)

//Created from a GraphQL interface.
type Post struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	Text          string    `json:"Post.text"`
	DatePublished time.Time `json:"Post.datePublished"`
}

var PostFields mulbase.FieldList = []mulbase.Field{MakeField("Post.text", 0), MakeField("Post.datePublished", 0)}

//Generating constant field values.
const (
	PostTextField          mulbase.Predicate = "Post.text"
	PostDatePublishedField mulbase.Predicate = "Post.datePublished"
)

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Post) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	err := txn.Query(ctx, mut)
	return err
}

//Fields returns all Scalar fields for this value.
func (r *Post) Fields() mulbase.FieldList {
	return PostFields
}

//Sets the types. This DOES NOT include interfaces!
//as they are set in dgraph already.
func (r *Post) SetType() {
	r.Type = []string{
		"Post",
	}
}

//Values returns all the scalar values for this node.
func (r *Post) Values() mulbase.DNode {
	var m PostScalars
	m.Text = r.Text
	m.DatePublished = r.DatePublished
	r.SetType()
	m.Node = r.Node
	return &m
}

//Values returns all the scalar values for this node.
func (r *Post) MapValues() mulbase.Mapper {
	var m = make(map[string]interface{}, 2)
	m["Post.text"] = r.Text
	m["Post.datePublished"] = r.DatePublished
	m["uid"] = r.Uid
	r.SetType()
	m["dgraph.type"] = r.Type
	return m
}

//PostScalars is simply to avoid a map[string]interface{}
//It is a mirror of the previous struct with all scalar values.
type PostScalars struct {
	mulbase.Node
	Text          string    `json:"Post.text"`
	DatePublished time.Time `json:"Post.datePublished"`
}

func (s *PostScalars) Values() mulbase.DNode {
	return s
}

func (s *PostScalars) MapValues() mulbase.Mapper {
	panic("PostScalars called, use the original one instead")
}

func (s *PostScalars) Fields() mulbase.FieldList {
	return PostFields
}

//End of model.template
type Question struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	//List of interfaces implemented.
	Post
	//Regular fields
	Title []Episode `json:"Question.title"`
	Id    int       `json:"Question.id"`
	Yes   []Comment `json:"Question.yes"`
}

var QuestionFields mulbase.FieldList = []mulbase.Field{MakeField("Question.title", 0|mulbase.MetaList), MakeField("Question.id", 0), MakeField("Question.yes", 0|mulbase.MetaObject|mulbase.MetaList|mulbase.MetaReverse), MakeField("Post.text", 0), MakeField("Post.datePublished", 0)}

//Generating constant field values.
const (
	QuestionTitleField         mulbase.Predicate = "Question.title"
	QuestionIdField            mulbase.Predicate = "Question.id"
	QuestionYesField           mulbase.Predicate = "Question.yes"
	QuestionTextField          mulbase.Predicate = "Post.text"
	QuestionDatePublishedField mulbase.Predicate = "Post.datePublished"
)

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Question) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	err := txn.Query(ctx, mut)
	return err
}

//Fields returns all Scalar fields for this value.
func (r *Question) Fields() mulbase.FieldList {
	return QuestionFields
}

//Sets the types. This DOES NOT include interfaces!
//as they are set in dgraph already.
func (r *Question) SetType() {
	r.Type = []string{
		"Question",
	}
}

//Values returns all the scalar values for this node.
func (r *Question) Values() mulbase.DNode {
	var m QuestionScalars
	m.Title = r.Title
	m.Id = r.Id
	m.Text = r.Text
	m.DatePublished = r.DatePublished
	r.SetType()
	m.Node = r.Node
	return &m
}

//Values returns all the scalar values for this node.
func (r *Question) MapValues() mulbase.Mapper {
	var m = make(map[string]interface{}, 4)
	m["Question.title"] = r.Title
	m["Question.id"] = r.Id
	m["Post.text"] = r.Text
	m["Post.datePublished"] = r.DatePublished
	m["uid"] = r.Uid
	r.SetType()
	m["dgraph.type"] = r.Type
	return m
}

//QuestionScalars is simply to avoid a map[string]interface{}
//It is a mirror of the previous struct with all scalar values.
type QuestionScalars struct {
	mulbase.Node
	Title         []Episode `json:"Question.title"`
	Id            int       `json:"Question.id"`
	Text          string    `json:"Post.text"`
	DatePublished time.Time `json:"Post.datePublished"`
}

func (s *QuestionScalars) Values() mulbase.DNode {
	return s
}

func (s *QuestionScalars) MapValues() mulbase.Mapper {
	panic("QuestionScalars called, use the original one instead")
}

func (s *QuestionScalars) Fields() mulbase.FieldList {
	return QuestionFields
}

//End of model.template
type Comment struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	//List of interfaces implemented.
	Post
	//Regular fields
	CommentsOn *Post    `json:"Comment.commentsOn"`
	Test       Episode  `json:"Comment.test"`
	Yolo       *Comment `json:"Comment.yolo"`
}

var CommentFields mulbase.FieldList = []mulbase.Field{MakeField("Comment.commentsOn", 0|mulbase.MetaObject|mulbase.MetaReverse), MakeField("Comment.test", 0), MakeField("Comment.yolo", 0|mulbase.MetaObject), MakeField("Post.text", 0), MakeField("Post.datePublished", 0)}

//Generating constant field values.
const (
	CommentCommentsOnField    mulbase.Predicate = "Comment.commentsOn"
	CommentTestField          mulbase.Predicate = "Comment.test"
	CommentYoloField          mulbase.Predicate = "Comment.yolo"
	CommentTextField          mulbase.Predicate = "Post.text"
	CommentDatePublishedField mulbase.Predicate = "Post.datePublished"
)

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Comment) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	err := txn.Query(ctx, mut)
	return err
}

//Fields returns all Scalar fields for this value.
func (r *Comment) Fields() mulbase.FieldList {
	return CommentFields
}

//Sets the types. This DOES NOT include interfaces!
//as they are set in dgraph already.
func (r *Comment) SetType() {
	r.Type = []string{
		"Comment",
	}
}

//Values returns all the scalar values for this node.
func (r *Comment) Values() mulbase.DNode {
	var m CommentScalars
	m.Test = r.Test
	m.Text = r.Text
	m.DatePublished = r.DatePublished
	r.SetType()
	m.Node = r.Node
	return &m
}

//Values returns all the scalar values for this node.
func (r *Comment) MapValues() mulbase.Mapper {
	var m = make(map[string]interface{}, 3)
	m["Comment.test"] = r.Test
	m["Post.text"] = r.Text
	m["Post.datePublished"] = r.DatePublished
	m["uid"] = r.Uid
	r.SetType()
	m["dgraph.type"] = r.Type
	return m
}

//CommentScalars is simply to avoid a map[string]interface{}
//It is a mirror of the previous struct with all scalar values.
type CommentScalars struct {
	mulbase.Node
	Test          Episode   `json:"Comment.test"`
	Text          string    `json:"Post.text"`
	DatePublished time.Time `json:"Post.datePublished"`
}

func (s *CommentScalars) Values() mulbase.DNode {
	return s
}

func (s *CommentScalars) MapValues() mulbase.Mapper {
	panic("CommentScalars called, use the original one instead")
}

func (s *CommentScalars) Fields() mulbase.FieldList {
	return CommentFields
}

//End of model.template
type Error struct {
	//This line declares basic properties for a database node.
	mulbase.Node
	//Regular fields
	Message   string    `json:"Error.message"`
	ErrorType string    `json:"Error.errorType"`
	Time      time.Time `json:"Error.time"`
}

var ErrorFields mulbase.FieldList = []mulbase.Field{MakeField("Error.message", 0), MakeField("Error.errorType", 0), MakeField("Error.time", 0)}

//Generating constant field values.
const (
	ErrorMessageField   mulbase.Predicate = "Error.message"
	ErrorErrorTypeField mulbase.Predicate = "Error.errorType"
	ErrorTimeField      mulbase.Predicate = "Error.time"
)

//SaveValues saves the node values that
//do not contain any references to other objects.
func (r *Error) SaveValues(ctx context.Context, txn *mulbase.Txn) error {
	mut := mulbase.CreateMutation(r.Values(), mulbase.QuerySet)
	err := txn.Query(ctx, mut)
	return err
}

//Fields returns all Scalar fields for this value.
func (r *Error) Fields() mulbase.FieldList {
	return ErrorFields
}

//Sets the types. This DOES NOT include interfaces!
//as they are set in dgraph already.
func (r *Error) SetType() {
	r.Type = []string{
		"Error",
	}
}

//Values returns all the scalar values for this node.
func (r *Error) Values() mulbase.DNode {
	var m ErrorScalars
	m.Message = r.Message
	m.ErrorType = r.ErrorType
	m.Time = r.Time
	r.SetType()
	m.Node = r.Node
	return &m
}

//Values returns all the scalar values for this node.
func (r *Error) MapValues() mulbase.Mapper {
	var m = make(map[string]interface{}, 3)
	m["Error.message"] = r.Message
	m["Error.errorType"] = r.ErrorType
	m["Error.time"] = r.Time
	m["uid"] = r.Uid
	r.SetType()
	m["dgraph.type"] = r.Type
	return m
}

//ErrorScalars is simply to avoid a map[string]interface{}
//It is a mirror of the previous struct with all scalar values.
type ErrorScalars struct {
	mulbase.Node
	Message   string    `json:"Error.message"`
	ErrorType string    `json:"Error.errorType"`
	Time      time.Time `json:"Error.time"`
}

func (s *ErrorScalars) Values() mulbase.DNode {
	return s
}

func (s *ErrorScalars) MapValues() mulbase.Mapper {
	panic("ErrorScalars called, use the original one instead")
}

func (s *ErrorScalars) Fields() mulbase.FieldList {
	return ErrorFields
}

//End of model.template
